import logging
from telegram import Update
from telegram.ext import (
    Application,
    CommandHandler,
    ContextTypes,
)
from api import (
    get_crypto_price, 
    get_stock_price, 
    get_forex_price, 
    get_commodity_price
)
from models import ASSETS, get_asset_type, get_asset_name, get_asset_info
from handlers.alerts import price_check_callback
from handlers.callbacks import start_menu
from utils.price_utils import get_price  # –ò–º–ø–æ—Ä—Ç –∏–∑ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –º–æ–¥—É–ª—è

logger = logging.getLogger(__name__)

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ /start - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await start_menu(update.message, context)

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ /help - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø—Ä–∞–≤–∫—É"""
    help_text = """
üìå –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/price [–∫–æ–¥] - –¶–µ–Ω–∞ –∞–∫—Ç–∏–≤–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: /price BTCUSDT)
/alert [–∫–æ–¥] [%] - –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä: /alert AAPL 2)
/graph [–∫–æ–¥] - –ì—Ä–∞—Ñ–∏–∫ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç)

–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
"""
    await update.message.reply_text(help_text)

async def price_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /price"""
    if not context.args:
        await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ –∫–æ–¥ –∞–∫—Ç–∏–≤–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: /price BTCUSDT)")
        return
    
    symbol = context.args[0].upper()
    price = get_price(symbol)
    
    if price == 0.0:
        await update.message.reply_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É –¥–ª—è {symbol}")
        return
    
    asset_type = get_asset_type(symbol)
    if not asset_type:
        await update.message.reply_text("‚ùå –ê–∫—Ç–∏–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    await update.message.reply_text(f"üí∞ {get_asset_name(symbol)}: ${price:.2f}")

async def alert_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /alert"""
    if len(context.args) != 2:
        await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /alert [–∫–æ–¥] [–ø—Ä–æ—Ü–µ–Ω—Ç]")
        return
    
    symbol = context.args[0].upper()
    try:
        threshold = float(context.args[1])
    except ValueError:
        await update.message.reply_text("‚ùå –ü—Ä–æ—Ü–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
        return
    
    asset_type = get_asset_type(symbol)
    if not asset_type:
        await update.message.reply_text("‚ùå –ê–∫—Ç–∏–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    current_price = get_price(symbol)
    if current_price == 0.0:
        await update.message.reply_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É –¥–ª—è {symbol}")
        return
        
    context.bot_data[f"last_price_{symbol}"] = current_price
    
    context.job_queue.run_repeating(
        price_check_callback,
        interval=60,
        first=10,
        chat_id=update.effective_chat.id,
        data={'symbol': symbol, 'threshold': threshold},
        name=f'{update.effective_chat.id}_{symbol}'
    )
    
    await update.message.reply_text(
        f"üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è {get_asset_name(symbol)} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {threshold}%"
    )

async def graph_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /graph"""
    if not context.args:
        await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ –∫–æ–¥ –∞–∫—Ç–∏–≤–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: /graph BTCUSDT)")
        return
    
    symbol = context.args[0].upper()
    asset_type = get_asset_type(symbol)
    
    if not asset_type:
        await update.message.reply_text("‚ùå –ê–∫—Ç–∏–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    if asset_type != 'crypto':
        await update.message.reply_text("‚ö†Ô∏è –ì—Ä–∞—Ñ–∏–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –¥–ª—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç")
        return
    
    from utils.chart import create_chart
    result = await create_chart(symbol)
    
    if result['success']:
        await update.message.reply_photo(photo=open(result['filename'], 'rb'))
    else:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {result['error']}")

def register_commands(app: Application) -> None:
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
    app.add_handler(CommandHandler("start", start_command))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("price", price_command))
    app.add_handler(CommandHandler("alert", alert_command))
    app.add_handler(CommandHandler("graph", graph_command))
