import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CallbackQueryHandler,
    ContextTypes,
    MessageHandler,
    filters
)
from models import ASSETS, get_asset_type, get_asset_name
from utils.price_utils import get_price  # ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç
from handlers.alerts import handle_set_alert, set_alert
from utils.chart import create_chart

logger = logging.getLogger(__name__)

async def start_menu(message, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    keyboard = [
        [InlineKeyboardButton("üí∞ –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã", callback_data='crypto')],
        [InlineKeyboardButton("üìà –ê–∫—Ü–∏–∏ (–í –ü–†–û–¶–ï–°–°–ï –†–ê–ó–†–ê–ë–û–¢–ö–ò)", callback_data='stocks')],
        [InlineKeyboardButton("üí± –§–æ—Ä–µ–∫—Å (–í –ü–†–û–¶–ï–°–°–ï –†–ê–ó–†–ê–ë–û–¢–ö–ò)", callback_data='forex')],
        [InlineKeyboardButton("üõ¢Ô∏è –°—ã—Ä—å–µ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã (–í –ü–†–û–¶–ï–°–°–ï –†–ê–ó–†–ê–ë–û–¢–ö–ò)", callback_data='commodities')],
        [InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data='help')]
    ]
    await message.reply_text(
        "üìä –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∞–∫—Ç–∏–≤–æ–≤:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def handle_help(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º"""
    help_text = """
üìå –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/price [–∫–æ–¥] - –¶–µ–Ω–∞ –∞–∫—Ç–∏–≤–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: /price BTCUSDT)
/alert [–∫–æ–¥] [%] - –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä: /alert AAPL 2)
/graph [–∫–æ–¥] - –ì—Ä–∞—Ñ–∏–∫ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç)

–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
"""
    query = update.callback_query
    await query.answer()
    await query.edit_message_text(help_text)

async def handle_category(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    query = update.callback_query
    await query.answer()
    category = query.data

    buttons = [
        [InlineKeyboardButton(asset['name'], callback_data=f'price_{symbol}')]
        for symbol, asset in ASSETS[category].items()
    ]
    buttons.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back')])

    category_names = {
        'crypto': '–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã',
        'stocks': '–ê–∫—Ü–∏–∏',
        'forex': '–§–æ—Ä–µ–∫—Å',
        'commodities': '–°—ã—Ä—å–µ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã'
    }

    await query.edit_message_text(
        f"–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫—Ç–∏–≤ ({category_names.get(category, category)}):",
        reply_markup=InlineKeyboardMarkup(buttons)
    )

async def handle_price(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ü–µ–Ω—É –∞–∫—Ç–∏–≤–∞"""
    query = update.callback_query
    await query.answer()
    symbol = query.data.split('_')[1]
    price = get_price(symbol)
    
    asset_type = get_asset_type(symbol)
    asset_name = get_asset_name(symbol)
    
    keyboard = [
        [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=f'price_{symbol}')],
        [InlineKeyboardButton("üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ", callback_data=f'setalert_{symbol}')]
    ]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≥—Ä–∞—Ñ–∏–∫–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
    if asset_type == 'crypto':
        keyboard.insert(0, [InlineKeyboardButton("üìà –ì—Ä–∞—Ñ–∏–∫", callback_data=f'graph_{symbol}')])
    
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f'back_{asset_type}')])
    
    price_text = f"üí∞ {asset_name}: ${price:.2f}" if price > 0 else f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É –¥–ª—è {asset_name}"
    
    await query.edit_message_text(
        price_text,
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def handle_graph(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–∞"""
    query = update.callback_query
    await query.answer()
    symbol = query.data.split('_')[1]
    
    asset_type = get_asset_type(symbol)
    if asset_type == 'crypto':
        result = await create_chart(symbol)
        if result['success']:
            await query.message.reply_photo(photo=open(result['filename'], 'rb'))
        else:
            await query.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {result['error']}")
    else:
        await query.message.reply_text("‚ö†Ô∏è –ì—Ä–∞—Ñ–∏–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –¥–ª—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç")

async def handle_back(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –ù–∞–∑–∞–¥"""
    query = update.callback_query
    await query.answer()
    
    # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
    if '_' in query.data:
        category = query.data.split('_')[1]
        query.data = category
        await handle_category(update, context)
    else:
        await start_menu(query.message, context)

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logger.error(f"–û—à–∏–±–∫–∞: {context.error}")
    if update.callback_query:
        await update.callback_query.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
        await update.callback_query.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    else:
        await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

def register_callbacks(app: Application) -> None:
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ callback-–∑–∞–ø—Ä–æ—Å–æ–≤"""
    app.add_handler(CallbackQueryHandler(handle_help, pattern='^help$'))
    app.add_handler(CallbackQueryHandler(handle_category, pattern='^(crypto|stocks|forex|commodities)$'))
    app.add_handler(CallbackQueryHandler(handle_price, pattern='^price_'))
    app.add_handler(CallbackQueryHandler(handle_graph, pattern='^graph_'))
    app.add_handler(CallbackQueryHandler(handle_set_alert, pattern='^setalert_'))
    app.add_handler(CallbackQueryHandler(handle_back, pattern='^back'))
    
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, set_alert))
    
    app.add_error_handler(error_handler)
